import React, { useState, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  Upload,
  Wand2,
  Download,
  Sparkles,
  Loader2,
  RefreshCw,
} from "lucide-react";

import Navbar from "../src/navbar/Navbar";
import { HfInference } from "@huggingface/inference";

export default function GhibliConverter() {
  const [originalImage, setOriginalImage] = useState(null);
  const [convertedImage, setConvertedImage] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [selectedStyle, setSelectedStyle] = useState("classic-ghibli");
  const fileInputRef = useRef(null);

  // Initialize HF client
  const HF_TOKEN = import.meta.env.VITE_HF_TOKEN || "your_hf_token_here";
  const hf = new HfInference(HF_TOKEN);

  // Enhanced style prompts for FLUX model
  const styleOptions = [
    {
      id: "classic-ghibli",
      name: "Classic Ghibli",
      description: "Miyazaki's signature style",
      prompt:
        "Studio Ghibli style, Hayao Miyazaki, soft watercolor aesthetic, dreamy atmospheric lighting with god rays, lush detailed nature backgrounds, whimsical character expressions, painterly brushstrokes, nostalgic warm color palette, hand-drawn quality, magical realism, masterpiece, high quality anime art, cinematic, My Neighbor Totoro, Spirited Away",
    },
    {
      id: "ponyo-style",
      name: "Ponyo Ocean",
      description: "Vibrant watercolor seas",
      prompt:
        "Ponyo movie style, vibrant saturated colors, dynamic flowing water with translucent waves, bubble and foam details, energetic movement, bright cheerful lighting, rounded soft character designs, impressionistic water reflections, aquamarine blues, coral pinks, playful whimsical, hand-painted texture, oceanic fantasy",
    },
    {
      id: "howls-castle",
      name: "Howl's Fantasy",
      description: "Steampunk magical realism",
      prompt:
        "Howl's Moving Castle style, steampunk fantasy, Victorian European architecture with magical twists, dramatic cloudy skies, rich jewel tones, romantic lighting, ornate mechanical details, Gothic Art Nouveau influences, mysterious atmospheric fog, fantasy adventure, detailed cityscapes",
    },
  ];

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) {
        setError("Image size must be less than 5MB");
        return;
      }
      const reader = new FileReader();
      reader.onload = (event) => {
        setOriginalImage(event.target.result);
        setConvertedImage(null);
        setError(null);
      };
      reader.readAsDataURL(file);
    }
  };

 const convertToGhibli = async () => {
   if (!originalImage) return;

   setIsLoading(true);
   setError(null);

   try {
     const currentStyle = styleOptions.find((s) => s.id === selectedStyle);

     // Convert base64 to Blob
     const base64Response = await fetch(originalImage);
     const imageBlob = await base64Response.blob();

     console.log("Starting FLUX Kontext conversion...");

     // Use FLUX.1-Kontext-dev with fal-ai provider
     const result = await hf.imageToImage({
       model: "black-forest-labs/FLUX.1-Kontext-dev",
       provider: "fal-ai",
       inputs: imageBlob,
       parameters: {
         prompt: `${currentStyle.prompt}, high quality, masterpiece, detailed anime artwork`,
       },
     });

     if (!result) {
       throw new Error("No image generated by FLUX model");
     }

     // Convert Blob to base64 for display and download
     const convertedBase64 = await new Promise((resolve) => {
       const reader = new FileReader();
       reader.onloadend = () => resolve(reader.result);
       reader.readAsDataURL(result);
     });

     setConvertedImage(convertedBase64);
     console.log("Image converted successfully!");
   } catch (err) {
     console.error("FLUX conversion error:", err);

     // More specific error messages
     if (err.message.includes("401") || err.message.includes("auth")) {
       setError("❌ Invalid Hugging Face token. Please check your API key.");
     } else if (err.message.includes("rate limit")) {
       setError("⏳ Rate limit exceeded. Please wait a moment and try again.");
     } else if (err.message.includes("model")) {
       setError("🔧 Model temporarily unavailable. Please try again soon.");
     } else {
       setError(
         `Conversion failed: ${err.message}. Please try a different image.`
       );
     }
   } finally {
     setIsLoading(false);
   }
 };

  const downloadImage = () => {
    if (!convertedImage) return;
    const link = document.createElement("a");
    link.href = convertedImage;
    link.download = `ghibli-art-${Date.now()}.png`;
    link.click();
  };

  return (
    <>
      <Navbar />
      <div className="min-h-screen bg-black relative overflow-hidden pt-20">
        {/* Animated Background */}
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_20%_20%,rgba(255,255,0,0.1),transparent),radial-gradient(circle_at_80%_80%,rgba(255,255,0,0.15),transparent)] animate-pulse"></div>
        <div className="absolute inset-0 bg-gradient-to-b from-black via-black/70 to-transparent"></div>

        <div className="relative z-10 container mx-auto px-6 py-12">
          {/* Header */}
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            className="text-center mb-12"
          >
            <h1 className="text-4xl md:text-6xl font-extrabold text-white mb-4">
              <span className="text-yellow-400">Ghibli</span> Art Converter
            </h1>
            <p className="text-gray-300 text-lg max-w-2xl mx-auto">
              Transform your photos into magical Studio Ghibli-style artwork
              with AniCraft
            </p>
          </motion.div>

          {/* Style Selection */}
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="max-w-4xl mx-auto mb-8"
          >
            <label className="block text-yellow-400 font-semibold mb-3 text-center">
              Choose Your Ghibli Style:
            </label>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {styleOptions.map((style) => (
                <button
                  key={style.id}
                  onClick={() => setSelectedStyle(style.id)}
                  className={`p-5 rounded-2xl border-2 transition-all duration-300 text-left ${
                    selectedStyle === style.id
                      ? "bg-yellow-400 border-yellow-400 text-black font-bold scale-105 shadow-lg shadow-yellow-400/30"
                      : "bg-white/5 border-yellow-400/20 text-white hover:border-yellow-400/50 hover:bg-white/10"
                  }`}
                >
                  <div className="font-bold text-lg mb-1">{style.name}</div>
                  <div
                    className={`text-sm ${
                      selectedStyle === style.id
                        ? "text-black/70"
                        : "text-gray-400"
                    }`}
                  >
                    {style.description}
                  </div>
                </button>
              ))}
            </div>
          </motion.div>

          {/* Main Content */}
          <div className="max-w-6xl mx-auto">
            {/* Upload Section */}
            {!originalImage && (
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.5 }}
                className="bg-white/5 backdrop-blur-xl border border-yellow-400/20 rounded-3xl p-12 text-center"
              >
                <input
                  type="file"
                  ref={fileInputRef}
                  onChange={handleImageUpload}
                  accept="image/*"
                  className="hidden"
                />
                <motion.button
                  onClick={() => fileInputRef.current.click()}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="bg-gradient-to-r from-yellow-400 to-yellow-500 text-black px-8 py-4 rounded-2xl font-bold text-lg shadow-lg hover:shadow-yellow-400/50 transition-all duration-300 flex items-center gap-3 mx-auto"
                >
                  <Upload size={24} />
                  Upload Your Image
                </motion.button>
                <p className="text-gray-400 mt-4">
                  Supports JPG, PNG, WEBP (Max 5MB)
                </p>
                <p className="text-gray-500 text-sm mt-2">
                  💡 Tip: Photos of landscapes, pets, or people work great!
                </p>
              </motion.div>
            )}

            {/* Image Display & Conversion */}
            {originalImage && (
              <div className="grid md:grid-cols-2 gap-8">
                {/* Original Image */}
                <motion.div
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.5 }}
                  className="bg-white/5 backdrop-blur-xl border border-yellow-400/20 rounded-3xl p-6"
                >
                  <h3 className="text-xl font-bold text-yellow-400 mb-4 flex items-center gap-2">
                    <Upload size={20} />
                    Your Photo
                  </h3>
                  <img
                    src={originalImage}
                    alt="Original"
                    className="w-full h-auto rounded-2xl shadow-2xl"
                  />
                </motion.div>

                {/* Converted Image */}
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.5 }}
                  className="bg-white/5 backdrop-blur-xl border border-yellow-400/20 rounded-3xl p-6"
                >
                  <h3 className="text-xl font-bold text-yellow-400 mb-4 flex items-center gap-2">
                    <Sparkles size={20} />
                    Ghibli Magic
                  </h3>
                  <div className="w-full aspect-square rounded-2xl bg-black/30 flex items-center justify-center overflow-hidden">
                    <AnimatePresence mode="wait">
                      {isLoading ? (
                        <motion.div
                          key="loading"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          exit={{ opacity: 0 }}
                          className="flex flex-col items-center gap-4"
                        >
                          <Loader2
                            size={48}
                            className="text-yellow-400 animate-spin"
                          />
                          <p className="text-gray-300 font-semibold">
                            Creating Ghibli magic...
                          </p>
                          <p className="text-gray-500 text-sm">
                            Using FLUX AI to transform your image
                          </p>
                        </motion.div>
                      ) : convertedImage ? (
                        <motion.img
                          key="converted"
                          initial={{ opacity: 0, scale: 0.9 }}
                          animate={{ opacity: 1, scale: 1 }}
                          exit={{ opacity: 0 }}
                          src={convertedImage}
                          alt="Ghibli Style"
                          className="w-full h-full object-cover rounded-2xl shadow-2xl"
                        />
                      ) : (
                        <motion.div
                          key="placeholder"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          exit={{ opacity: 0 }}
                          className="text-gray-500 text-center p-8"
                        >
                          <Wand2
                            size={48}
                            className="mx-auto mb-2 opacity-30"
                          />
                          <p>Your Ghibli artwork will appear here</p>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
                </motion.div>
              </div>
            )}

            {/* Error Message */}
            {error && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-red-500/10 border border-red-500/30 rounded-2xl p-4 mt-6 text-center"
              >
                <p className="text-red-400">{error}</p>
              </motion.div>
            )}

            {/* Action Buttons */}
            {originalImage && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.3 }}
                className="flex flex-wrap justify-center gap-4 mt-8"
              >
                <motion.button
                  onClick={convertToGhibli}
                  disabled={isLoading}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="bg-gradient-to-r from-yellow-400 to-yellow-500 text-black px-8 py-4 rounded-2xl font-bold text-lg shadow-lg hover:shadow-yellow-400/50 transition-all duration-300 flex items-center gap-3 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <Wand2 size={24} />
                  {isLoading ? "Converting..." : "✨ Create Ghibli Art"}
                </motion.button>

                {convertedImage && (
                  <>
                    <motion.button
                      onClick={downloadImage}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      className="border-2 border-yellow-400 text-yellow-400 px-8 py-4 rounded-2xl font-bold text-lg shadow-lg hover:bg-yellow-400 hover:text-black transition-all duration-300 flex items-center gap-3"
                    >
                      <Download size={24} />
                      Download
                    </motion.button>

                    <motion.button
                      onClick={convertToGhibli}
                      disabled={isLoading}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      className="border border-green-400 text-green-400 px-8 py-4 rounded-2xl font-bold text-lg hover:bg-green-400 hover:text-black transition-all duration-300 flex items-center gap-3 disabled:opacity-50"
                    >
                      <RefreshCw size={24} />
                      Regenerate
                    </motion.button>
                  </>
                )}

                <motion.button
                  onClick={() => {
                    setOriginalImage(null);
                    setConvertedImage(null);
                    setError(null);
                  }}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="border border-gray-500 text-gray-300 px-8 py-4 rounded-2xl font-bold text-lg hover:bg-white/10 transition-all duration-300"
                >
                  Start Over
                </motion.button>
              </motion.div>
            )}
          </div>

          {/* Info Cards */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="grid md:grid-cols-3 gap-6 mt-16 max-w-6xl mx-auto"
          >
            {[
              {
                icon: <Sparkles size={32} />,
                title: "Powered by FLUX AI",
                description:
                  "Using Black Forest Labs FLUX.1 AI for high-quality Ghibli style transformation",
              },
              {
                icon: <Wand2 size={32} />,
                title: "3 Unique Styles",
                description:
                  "Classic Ghibli, Ponyo Ocean, or Howl's Fantasy - each with distinct aesthetics",
              },
              {
                icon: <Download size={32} />,
                title: "High Quality Output",
                description:
                  "Download your beautiful artwork in full resolution, perfect for printing",
              },
            ].map((card, index) => (
              <div
                key={index}
                className="bg-white/5 backdrop-blur-xl border border-yellow-400/10 rounded-2xl p-6 text-center hover:bg-white/10 transition-all duration-300"
              >
                <div className="text-yellow-400 flex justify-center mb-4">
                  {card.icon}
                </div>
                <h4 className="text-white font-bold text-lg mb-2">
                  {card.title}
                </h4>
                <p className="text-gray-400 text-sm">{card.description}</p>
              </div>
            ))}
          </motion.div>
        </div>
      </div>
    </>
  );
}
